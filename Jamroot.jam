# Quickstart:

# Install Boost. You will need iostreams with zlib support. You should
# specify --build-type=complete

# Install Xerces (optional)

# Put bjam on your path. Under Linux/Cygwin this can be done e.g. by
# export PATH=${PATH}:/cygdrive/c/boost_1_41_0

# Set BOOST_BUILD_PATH, under Linux/Cygwin this can be done e.g. by
# export BOOST_BUILD_PATH c:/boost_1_41_0

# Copy user-config.jam.example to user-config.jam and edit the
# settings to match your system. You can also use environment
# variables if you prefer. The user-config file will take precedence
# if both methods are used. You can just set NO_XERCES if you are in a
# hurry as everything else then has a reasonable default.

# run bjam in the directory this file is in. It will compile everything,
# and then it will run the unit tests.

include user-config.jam ;

import os ;

if ! [ os.environ BOOST_BUILD_PATH ]
{
    EXIT Protean: BOOST_BUILD_PATH needs to be set to the toplevel directory of a Boost distribution, e.g. c:/boost_1_41_0 ;
}

BOOSTROOT = [ os.environ BOOST_BUILD_PATH ] ;
BOOST_INCLUDE ?= [ os.environ BOOST_INCLUDE ] ;
BOOST_INCLUDE ?= $(BOOSTROOT) ;
BOOST_LIB ?= [ os.environ BOOST_LIB ] ;

if ! $(BOOST_LIB)
{
    BOOST_LIB += $(BOOSTROOT)/stage/lib ;
    ECHO Protean: BOOST_LIB defaults to $(BOOST_LIB) ;
}

if ! $(BOOST_LIB)
{
    EXIT Protean: BOOST_LIB must be set ;
}

#fixme: this is being ignored ATM
if ! $(BOOST_INCLUDE)
{
    EXIT Protean: BOOST_INCLUDE must be set ;
}

NO_XERCES ?= [ os.environ NO_XERCES ] ;
XERCES_BINARY ?= [ os.environ XERCES_BINARY ] ;
XERCES_LIBPATH ?= [ os.environ XERCES_LIBPATH ] ;
XERCES_INCLUDE ?= [ os.environ XERCES_INCLUDE ] ;

ECHO env.BOOST_BUILD_PATH= [ os.environ BOOST_BUILD_PATH ] ;
ECHO BOOST_INCLUDE=$(BOOST_INCLUDE) ;
ECHO BOOST_LIB=$(BOOST_LIB) ;
ECHO XERCES_INCLUDE=$(XERCES_INCLUDE) ;
ECHO XERCES_LIBPATH=$(XERCES_LIBPATH) ;
ECHO XERCES_BINARY=$(XERCES_BINARY) ;
ECHO NO_XERCES=$(NO_XERCES) ;

using testing ;
import boost ;
boost.use-project ;

project : requirements
    <toolset>gcc:<cxxflags>-Wno-multichar
    <toolset>gcc:<cxxflags>-Wno-strict-aliasing
    <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
;

rule windows-additional-properties 
{
   ADDITIONAL_LIB_PROPERTIES += <link>shared:<define>PROTEAN_BUILD_DLL ;
   ADDITIONAL_LIB_PROPERTIES += <link>shared:<define>BOOST_ALL_DYN_LINK ;
}

switch [ os.name ]
{
    case "CYGWIN" :
        windows-additional-properties ;
 
    case "NT" :
        windows-additional-properties ;

    case "LINUX" :
}

if $(XERCES_BINARY)
{
    lib xerces : :  <name>$(XERCES_BINARY) <search>$(XERCES_LIBPATH) : : <include>$(XERCES_INCLUDE) ;
}
else
{
    switch [ os.name ]
    {
        case "CYGWIN" :
            lib xerces : : <toolset>gcc <name>xerces-c <search>$(XERCES_LIBPATH) : : <include>$(XERCES_INCLUDE) ;
            lib xerces : : <toolset>msvc <variant>debug <name>xerces-c_3D <search>$(XERCES_LIBPATH) : : <include>$(XERCES_INCLUDE) ;
            lib xerces : : <toolset>msvc <variant>release <name>xerces-c_3 <search>$(XERCES_LIBPATH) : : <include>$(XERCES_INCLUDE) ;
 
        case "NT" :
            lib xerces : : <variant>debug <name>xerces-c_3D <search>$(XERCES_LIBPATH) : : <include>$(XERCES_INCLUDE) ;
            lib xerces : : <variant>release <name>xerces-c_3 <search>$(XERCES_LIBPATH) : : <include>$(XERCES_INCLUDE) ;

        case "LINUX" :
            lib pthread : : <name>pthread ;
            lib xerces : pthread/<link>shared : <name>xerces-c <search>$(XERCES_LIBPATH) : : <include>$(XERCES_INCLUDE) ;

        case * :
            EXIT Protean: unknown os, please set either XERCES_BINARY or NO_XERCES ;
    }
}

DEPENDENTONXERCES =
   src/xml_reader.cpp src/xml_parser.cpp src/xml_writer.cpp test/xml_streams.cpp 
   protean/xml_reader.hpp protean/xml_parser.hpp protean/xml_writer.hpp protean/xml_defs.hpp
;

if $(NO_XERCES) 
{
   EXCLUDE += $(DEPENDENTONXERCES) ;
   ECHO Protean: Building without Xerces support because NO_XERCES is set ;
}
else
{
   XERCES_BJAM_NAME = xerces ;
   if ! $(XERCES_INCLUDE)
   {
        EXIT Protean: XERCES_INCLUDE needs to be set if NO_XERCES is not ;
   }
}

lib protean : 
   [ glob src/*.cpp : $(EXCLUDE) ]
   /boost//filesystem
   /boost//date_time
   /boost//regex
   /boost//system
   /boost//iostreams
   $(XERCES_BJAM_NAME)
:
   <library-path>$(XERCES_LIBPATH)
   <library-path>$(BOOST_LIB)
   <include>.
   $(ADDITIONAL_LIB_PROPERTIES)
: : 
   <include>.
;

rule test-properties ( properties * )
{
    local result ;
    if [ os.name ] = "CYGWIN" || [ os.name ] = "NT"
    {
       if  <link>shared in $(properties)
       {
          result += <define>PROTEAN_USE_DLL ;
       }
    }
    return $(result) ;
}


rule test-protean ( properties * )
{
    return [
            unit-test
                protean-unit-test
            :
                [ glob test/*.cpp : $(EXCLUDE) ]
                protean
                /boost//unit_test_framework
                $(XERCES_BJAM_NAME)
            :
                <library-path>$(XERCES_LIBPATH)
                <library-path>$(BOOST_LIB)
                $(properties)
            	<conditional>@test-properties
                <tag>@boost.tag_std
            : 
            :    
            ] ;
}

test-protean <link>static <variant>debug ;
test-protean <link>static <variant>release ;

if [ os.name ] != "CYGWIN"
{
    #Dynamic linking under Cygwin crashes g++ 3.4.4. The issue seems
    #to be http://gcc.gnu.org/bugzilla/show_bug.cgi?id=23589

    test-protean <link>shared <variant>debug ;
    test-protean <link>shared <variant>release ;
}

